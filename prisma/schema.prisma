generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["omitApi"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Chatroom {
  id         String   @id @default(uuid())
  name       String?
  created    DateTime @default(now()) @db.Date
  colorClass String   @map("color_class")

  participants User[]
  messages     Message[]

  @@map("chatrooms")
}

model Message {
  id      String      @id @default(uuid())
  body    String
  created DateTime    @default(now())
  type    MessageType @default(ACTION)

  chatroom   Chatroom @relation(fields: [chatRoomId], references: [id])
  chatRoomId String

  user   User?   @relation(fields: [userId], references: [id])
  userId String?

  @@map("messages")
}

model User {
  id           String   @id @default(uuid())
  username     String   @unique
  email        String   @unique
  password     String
  role         UserRole @default(USER)
  created      DateTime @default(now())
  isOnline     Boolean  @map("is_online")
  profileImage String?  @map("profile_image")
  colorClass   String   @map("color_class")

  languages Language[]

  contacts    User[] @relation("UserContacts")
  contactedBy User[] @relation("UserContacts")

  chatrooms Chatroom[]
  messages  Message[]

  receivedNotifications Notification[] @relation("NotificationReceiver")
  sentNotifications     Notification[] @relation("NotificationSender")

  friendRequestReceiver FriendRequest[] @relation("FriendRequestReceiver")
  friendRequestSender   FriendRequest[] @relation("FriendRequestSender")

  @@map("users")
}

model Notification {
  id      String           @id @default(uuid())
  body    String
  type    NotificationType @default(MESSAGE)
  created DateTime         @default(now())
  isRead  Boolean          @default(false)

  receiver   User   @relation("NotificationReceiver", fields: [receiverId], references: [id])
  receiverId String

  sender   User?   @relation("NotificationSender", fields: [senderId], references: [id])
  senderId String?

  @@map("notifications")
}

model FriendRequest {
  id String @id @default(uuid())

  receiver   User   @relation("FriendRequestReceiver", fields: [receiverId], references: [id])
  receiverId String

  sender   User?   @relation("FriendRequestSender", fields: [senderId], references: [id])
  senderId String?

  @@map("friendRequests")
}

model Language {
  id   String @id @default(uuid())
  name String

  users User[]

  @@map("languages")
}

enum MessageType {
  ACTION
  MESSAGE
}

enum UserRole {
  USER
  ADMIN
}

enum NotificationType {
  MESSAGE
  CONTACT_REQUEST
}
